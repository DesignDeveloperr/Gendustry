buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.CDAGaming:ForgeGradle:1c670759c5'
        classpath 'com.github.CDAGaming:CurseGradle:184e4322fd'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = config.gendustry.version
group = "net.bdew"
archivesBaseName = "gendustry"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    replace("BDLIB_VER", config.bdlib.version)
    replace("GENDUSTRY_VER", config.gendustry.version)
    replace("GENDUSTRY_APIVER", "2.3.0")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "bdew"
        url = "http://jenkins.bdew.net/maven"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name "waila"
        url "http://mobiusstrip.eu/maven"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
}

dependencies {
    compile "net.bdew:bdlib:${config.bdlib.version}-mc${config.minecraft.version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.ccl.version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.ccc.version}:dev"
    compile "com.mod-buildcraft:buildcraft:${config.buildcraft.version}:dev"
    compile "net.industrial-craft:industrialcraft-2:${config.ic2.version}:api"

    compile module("mcp.mobius.waila:Waila:${config.waila.version}_${config.minecraft.version}") {
        transitive = false // WAILA is depending on an invalid combination of CCC/NEI that doesn't run...
    }
    compile "net.bdew.thirdparty:mekanism:${config.mekanism.version}-mc${config.minecraft.version}:api"
}

sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    inputs.property "tokens", minecraft.replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        filter(ReplaceTokens, tokens: minecraft.replacements)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task apiJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include 'net/bdew/gendustry/api/**'
    }

    from(file('api-changelog.md'))

    duplicatesStrategy "exclude"

    extension = 'jar'
    classifier = 'api'
}

task sourceJar(type: Jar) {
    classifier "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier "dev"
    duplicatesStrategy "exclude"
}


jar {
    exclude "**/*.psd"
}

afterEvaluate { project ->
    // Fudge the inputs of api/source jars so we get the version after replacements
    tasks.getByPath(":sourceJar").from(tasks.getByPath(":sourceMainScala").outputs.files)
    tasks.getByPath(":apiJar").from(tasks.getByPath(":sourceMainScala").outputs.files, {
        include 'net/bdew/gendustry/api/**'
    })
}

artifacts {
    archives sourceJar
    archives deobfJar
    archives apiJar
}
